
UART_to_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b80  08002b80  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b88  08002b88  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b8c  08002b8c  00012b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000018  08002ba8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002ba8  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7f7  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184a  00000000  00000000  0002b83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021364  00000000  00000000  0002e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0d2  00000000  00000000  0004f684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca7c3  00000000  00000000  0005b756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125f19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002760  00000000  00000000  00125f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002b50 	.word	0x08002b50

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08002b50 	.word	0x08002b50

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_UART_TxCpltCallback>:
uint32_t Rx_counter, Tx_counter;

char str[20];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	Tx_counter++;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_UART_TxCpltCallback+0x20>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <HAL_UART_TxCpltCallback+0x20>)
 8000518:	6013      	str	r3, [r2, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000120 	.word	0x20000120

0800052c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	Rx_counter++;
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_UART_RxCpltCallback+0x2c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_UART_RxCpltCallback+0x2c>)
 800053c:	6013      	str	r3, [r2, #0]

	// Display received data on the LCD
	lcd_send_string((char *)Rx_buffer);
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <HAL_UART_RxCpltCallback+0x30>)
 8000540:	f000 f8ba 	bl	80006b8 <lcd_send_string>

	// Re-enable UART receive interrupt to continue receiving data
	HAL_UART_Receive_IT(huart, Rx_buffer, 10);
 8000544:	220a      	movs	r2, #10
 8000546:	4905      	ldr	r1, [pc, #20]	; (800055c <HAL_UART_RxCpltCallback+0x30>)
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f001 fbbd 	bl	8001cc8 <HAL_UART_Receive_IT>

}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000011c 	.word	0x2000011c
 800055c:	20000110 	.word	0x20000110

08000560 <main>:


int main()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

  HAL_Init();
 8000564:	f000 fad0 	bl	8000b08 <HAL_Init>
  uart_init();
 8000568:	f000 f8bc 	bl	80006e4 <uart_init>
  MX_I2C1_Init();
 800056c:	f000 f922 	bl	80007b4 <MX_I2C1_Init>
  lcd_init();
 8000570:	f000 f822 	bl	80005b8 <lcd_init>
  HAL_Delay(1000);  // Wait for LCD to initialize
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f000 fb38 	bl	8000bec <HAL_Delay>
  lcd_send_string("Hello World!");
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <main+0x48>)
 800057e:	f000 f89b 	bl	80006b8 <lcd_send_string>
  HAL_Delay(5000);
 8000582:	f241 3088 	movw	r0, #5000	; 0x1388
 8000586:	f000 fb31 	bl	8000bec <HAL_Delay>
  lcd_send_cmd(0x01);
 800058a:	2001      	movs	r0, #1
 800058c:	f000 f834 	bl	80005f8 <lcd_send_cmd>

  HAL_UART_Transmit_IT(&huart1,Tx_buffer,10);
 8000590:	220a      	movs	r2, #10
 8000592:	4906      	ldr	r1, [pc, #24]	; (80005ac <main+0x4c>)
 8000594:	4806      	ldr	r0, [pc, #24]	; (80005b0 <main+0x50>)
 8000596:	f001 fb52 	bl	8001c3e <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart1,Rx_buffer,10);
 800059a:	220a      	movs	r2, #10
 800059c:	4905      	ldr	r1, [pc, #20]	; (80005b4 <main+0x54>)
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <main+0x50>)
 80005a0:	f001 fb92 	bl	8001cc8 <HAL_UART_Receive_IT>
  while(1)
 80005a4:	e7fe      	b.n	80005a4 <main+0x44>
 80005a6:	bf00      	nop
 80005a8:	08002b68 	.word	0x08002b68
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000034 	.word	0x20000034
 80005b4:	20000110 	.word	0x20000110

080005b8 <lcd_init>:
  }
}


void lcd_init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_Delay(50);          // Wait for LCD to power up
 80005bc:	2032      	movs	r0, #50	; 0x32
 80005be:	f000 fb15 	bl	8000bec <HAL_Delay>
    lcd_send_cmd(0x02);     // initialize LCD in 4-bit mode
 80005c2:	2002      	movs	r0, #2
 80005c4:	f000 f818 	bl	80005f8 <lcd_send_cmd>
    HAL_Delay(50);
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f000 fb0f 	bl	8000bec <HAL_Delay>
    lcd_send_cmd(0x28);     // 2 line, 5*7 matrix
 80005ce:	2028      	movs	r0, #40	; 0x28
 80005d0:	f000 f812 	bl	80005f8 <lcd_send_cmd>
    HAL_Delay(50);
 80005d4:	2032      	movs	r0, #50	; 0x32
 80005d6:	f000 fb09 	bl	8000bec <HAL_Delay>
    lcd_send_cmd(0x0c);     // display on, cursor off
 80005da:	200c      	movs	r0, #12
 80005dc:	f000 f80c 	bl	80005f8 <lcd_send_cmd>
    HAL_Delay(50);
 80005e0:	2032      	movs	r0, #50	; 0x32
 80005e2:	f000 fb03 	bl	8000bec <HAL_Delay>
    lcd_send_cmd(0x80);     // force cursor to beginning (1st line)
 80005e6:	2080      	movs	r0, #128	; 0x80
 80005e8:	f000 f806 	bl	80005f8 <lcd_send_cmd>
    HAL_Delay(50);
 80005ec:	2032      	movs	r0, #50	; 0x32
 80005ee:	f000 fafd 	bl	8000bec <HAL_Delay>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	f043 030c 	orr.w	r3, r3, #12
 8000616:	b2db      	uxtb	r3, r3
 8000618:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // en=0, rs=0
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	b2db      	uxtb	r3, r3
 8000622:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	f043 030c 	orr.w	r3, r3, #12
 800062a:	b2db      	uxtb	r3, r3
 800062c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // en=0, rs=0
 800062e:	7bbb      	ldrb	r3, [r7, #14]
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	b2db      	uxtb	r3, r3
 8000636:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000638:	f107 0208 	add.w	r2, r7, #8
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2304      	movs	r3, #4
 8000642:	214e      	movs	r1, #78	; 0x4e
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <lcd_send_cmd+0x5c>)
 8000646:	f000 ff71 	bl	800152c <HAL_I2C_Master_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000078 	.word	0x20000078

08000658 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f023 030f 	bic.w	r3, r3, #15
 8000668:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	011b      	lsls	r3, r3, #4
 800066e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;  // en=1, rs=1
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f043 030d 	orr.w	r3, r3, #13
 8000676:	b2db      	uxtb	r3, r3
 8000678:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // en=0, rs=1
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f043 0309 	orr.w	r3, r3, #9
 8000680:	b2db      	uxtb	r3, r3
 8000682:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8000684:	7bbb      	ldrb	r3, [r7, #14]
 8000686:	f043 030d 	orr.w	r3, r3, #13
 800068a:	b2db      	uxtb	r3, r3
 800068c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // en=0, rs=1
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	f043 0309 	orr.w	r3, r3, #9
 8000694:	b2db      	uxtb	r3, r3
 8000696:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000698:	f107 0208 	add.w	r2, r7, #8
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2304      	movs	r3, #4
 80006a2:	214e      	movs	r1, #78	; 0x4e
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <lcd_send_data+0x5c>)
 80006a6:	f000 ff41 	bl	800152c <HAL_I2C_Master_Transmit>
}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000078 	.word	0x20000078

080006b8 <lcd_send_string>:

void lcd_send_string(char *str)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 80006c0:	e006      	b.n	80006d0 <lcd_send_string+0x18>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffc4 	bl	8000658 <lcd_send_data>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f4      	bne.n	80006c2 <lcd_send_string+0xa>
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <uart_init>:


void uart_init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

    //Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <uart_init+0xc0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <uart_init+0xc0>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <uart_init+0xc0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
    __HAL_RCC_USART1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <uart_init+0xc0>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <uart_init+0xc0>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <uart_init+0xc0>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f003 0310 	and.w	r3, r3, #16
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

     GPIO_InitStruct.Pin  = GPIO_PIN_9|GPIO_PIN_10;
 8000732:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000736:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800073c:	2307      	movs	r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Pull =  GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	61bb      	str	r3, [r7, #24]

     HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4816      	ldr	r0, [pc, #88]	; (80007a8 <uart_init+0xc4>)
 8000750:	f000 fc14 	bl	8000f7c <HAL_GPIO_Init>

     //Configure UART module
     huart1.Instance = USART1;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <uart_init+0xc8>)
 8000756:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <uart_init+0xcc>)
 8000758:	601a      	str	r2, [r3, #0]
     huart1.Init.BaudRate = 115200;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <uart_init+0xc8>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <uart_init+0xc8>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
     huart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <uart_init+0xc8>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
     huart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <uart_init+0xc8>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
     huart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <uart_init+0xc8>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <uart_init+0xc8>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <uart_init+0xc8>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]

     HAL_UART_Init(&huart1);
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <uart_init+0xc8>)
 8000788:	f001 fa0c 	bl	8001ba4 <HAL_UART_Init>

     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2025      	movs	r0, #37	; 0x25
 8000792:	f000 fb2a 	bl	8000dea <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000796:	2025      	movs	r0, #37	; 0x25
 8000798:	f000 fb43 	bl	8000e22 <HAL_NVIC_EnableIRQ>


}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	20000034 	.word	0x20000034
 80007b0:	40011000 	.word	0x40011000

080007b4 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_I2C1_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_I2C1_Init+0x58>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_I2C1_Init+0x50>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_I2C1_Init+0x50>)
 80007f2:	f000 fd57 	bl	80012a4 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f808 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000078 	.word	0x20000078
 8000808:	40005400 	.word	0x40005400
 800080c:	000186a0 	.word	0x000186a0

08000810 <Error_Handler>:

void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085a:	2007      	movs	r0, #7
 800085c:	f000 faba 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <HAL_I2C_MspInit+0x84>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12c      	bne.n	80008e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_I2C_MspInit+0x88>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <HAL_I2C_MspInit+0x88>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_I2C_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b0:	2312      	movs	r3, #18
 80008b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008bc:	2304      	movs	r3, #4
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <HAL_I2C_MspInit+0x8c>)
 80008c8:	f000 fb58 	bl	8000f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_I2C_MspInit+0x88>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_I2C_MspInit+0x88>)
 80008d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_I2C_MspInit+0x88>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40005400 	.word	0x40005400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020400 	.word	0x40020400

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a3a      	ldr	r2, [pc, #232]	; (8000a04 <HAL_UART_MspInit+0x108>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d135      	bne.n	800098a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000968:	2307      	movs	r3, #7
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4826      	ldr	r0, [pc, #152]	; (8000a0c <HAL_UART_MspInit+0x110>)
 8000974:	f000 fb02 	bl	8000f7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2025      	movs	r0, #37	; 0x25
 800097e:	f000 fa34 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000982:	2025      	movs	r0, #37	; 0x25
 8000984:	f000 fa4d 	bl	8000e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000988:	e038      	b.n	80009fc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <HAL_UART_MspInit+0x114>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d133      	bne.n	80009fc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 800099e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6313      	str	r3, [r2, #48]	; 0x30
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_UART_MspInit+0x10c>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009cc:	230c      	movs	r3, #12
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009dc:	2307      	movs	r3, #7
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <HAL_UART_MspInit+0x110>)
 80009e8:	f000 fac8 	bl	8000f7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2026      	movs	r0, #38	; 0x26
 80009f2:	f000 f9fa 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f6:	2026      	movs	r0, #38	; 0x26
 80009f8:	f000 fa13 	bl	8000e22 <HAL_NVIC_EnableIRQ>
}
 80009fc:	bf00      	nop
 80009fe:	3730      	adds	r7, #48	; 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40011000 	.word	0x40011000
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40004400 	.word	0x40004400

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 f8a4 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <USART1_IRQHandler+0x10>)
 8000a6e:	f001 f95b 	bl	8001d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000034 	.word	0x20000034

08000a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <USART2_IRQHandler+0x10>)
 8000a82:	f001 f951 	bl	8001d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000cc 	.word	0x200000cc

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aba:	490e      	ldr	r1, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad0:	4c0b      	ldr	r4, [pc, #44]	; (8000b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ade:	f7ff ffd7 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f002 f811 	bl	8002b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fd3b 	bl	8000560 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000af8:	08002b90 	.word	0x08002b90
  ldr r2, =_sbss
 8000afc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b00:	20000128 	.word	0x20000128

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f94f 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fe6e 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f967 	bl	8000e3e <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b88:	f000 f92f 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	20000010 	.word	0x20000010

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000014 	.word	0x20000014
 8000bd0:	20000124 	.word	0x20000124

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000124 	.word	0x20000124

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000014 	.word	0x20000014

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff29 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff3e 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff8e 	bl	8000d28 <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff31 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffa2 	bl	8000d90 <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff feb6 	bl	8000bd4 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d008      	beq.n	8000e88 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2280      	movs	r2, #128	; 0x80
 8000e7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e052      	b.n	8000f2e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0216 	bic.w	r2, r2, #22
 8000e96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d103      	bne.n	8000eb8 <HAL_DMA_Abort+0x62>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d007      	beq.n	8000ec8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0208 	bic.w	r2, r2, #8
 8000ec6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0201 	bic.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed8:	e013      	b.n	8000f02 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eda:	f7ff fe7b 	bl	8000bd4 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	d90c      	bls.n	8000f02 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2220      	movs	r2, #32
 8000eec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e015      	b.n	8000f2e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1e4      	bne.n	8000eda <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f14:	223f      	movs	r2, #63	; 0x3f
 8000f16:	409a      	lsls	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d004      	beq.n	8000f54 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e00c      	b.n	8000f6e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2205      	movs	r2, #5
 8000f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e165      	b.n	8001264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8154 	bne.w	800125e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d005      	beq.n	8000fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d130      	bne.n	8001030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	091b      	lsrs	r3, r3, #4
 800101a:	f003 0201 	and.w	r2, r3, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b03      	cmp	r3, #3
 800103a:	d017      	beq.n	800106c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d123      	bne.n	80010c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	08da      	lsrs	r2, r3, #3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3208      	adds	r2, #8
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0203 	and.w	r2, r3, #3
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80ae 	beq.w	800125e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b5d      	ldr	r3, [pc, #372]	; (800127c <HAL_GPIO_Init+0x300>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a5c      	ldr	r2, [pc, #368]	; (800127c <HAL_GPIO_Init+0x300>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b5a      	ldr	r3, [pc, #360]	; (800127c <HAL_GPIO_Init+0x300>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111e:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_GPIO_Init+0x304>)
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4f      	ldr	r2, [pc, #316]	; (8001284 <HAL_GPIO_Init+0x308>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d025      	beq.n	8001196 <HAL_GPIO_Init+0x21a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_GPIO_Init+0x30c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d01f      	beq.n	8001192 <HAL_GPIO_Init+0x216>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4d      	ldr	r2, [pc, #308]	; (800128c <HAL_GPIO_Init+0x310>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d019      	beq.n	800118e <HAL_GPIO_Init+0x212>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_GPIO_Init+0x314>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x20e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_GPIO_Init+0x318>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x20a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4a      	ldr	r2, [pc, #296]	; (8001298 <HAL_GPIO_Init+0x31c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x206>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_GPIO_Init+0x320>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x202>
 800117a:	2306      	movs	r3, #6
 800117c:	e00c      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 800117e:	2307      	movs	r3, #7
 8001180:	e00a      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 8001182:	2305      	movs	r3, #5
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 8001186:	2304      	movs	r3, #4
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x21c>
 8001196:	2300      	movs	r3, #0
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f002 0203 	and.w	r2, r2, #3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <HAL_GPIO_Init+0x324>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011da:	4a31      	ldr	r2, [pc, #196]	; (80012a0 <HAL_GPIO_Init+0x324>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_GPIO_Init+0x324>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_GPIO_Init+0x324>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_GPIO_Init+0x324>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_GPIO_Init+0x324>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_GPIO_Init+0x324>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_GPIO_Init+0x324>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2b0f      	cmp	r3, #15
 8001268:	f67f ae96 	bls.w	8000f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40021400 	.word	0x40021400
 800129c:	40021800 	.word	0x40021800
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e12b      	b.n	800150e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d106      	bne.n	80012d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff face 	bl	800086c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2224      	movs	r2, #36	; 0x24
 80012d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001308:	f000 fc24 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800130c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a81      	ldr	r2, [pc, #516]	; (8001518 <HAL_I2C_Init+0x274>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d807      	bhi.n	8001328 <HAL_I2C_Init+0x84>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a80      	ldr	r2, [pc, #512]	; (800151c <HAL_I2C_Init+0x278>)
 800131c:	4293      	cmp	r3, r2
 800131e:	bf94      	ite	ls
 8001320:	2301      	movls	r3, #1
 8001322:	2300      	movhi	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	e006      	b.n	8001336 <HAL_I2C_Init+0x92>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a7d      	ldr	r2, [pc, #500]	; (8001520 <HAL_I2C_Init+0x27c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	bf94      	ite	ls
 8001330:	2301      	movls	r3, #1
 8001332:	2300      	movhi	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0e7      	b.n	800150e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4a78      	ldr	r2, [pc, #480]	; (8001524 <HAL_I2C_Init+0x280>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	430a      	orrs	r2, r1
 800135c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4a6a      	ldr	r2, [pc, #424]	; (8001518 <HAL_I2C_Init+0x274>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d802      	bhi.n	8001378 <HAL_I2C_Init+0xd4>
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3301      	adds	r3, #1
 8001376:	e009      	b.n	800138c <HAL_I2C_Init+0xe8>
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	4a69      	ldr	r2, [pc, #420]	; (8001528 <HAL_I2C_Init+0x284>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	099b      	lsrs	r3, r3, #6
 800138a:	3301      	adds	r3, #1
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	430b      	orrs	r3, r1
 8001392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800139e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	495c      	ldr	r1, [pc, #368]	; (8001518 <HAL_I2C_Init+0x274>)
 80013a8:	428b      	cmp	r3, r1
 80013aa:	d819      	bhi.n	80013e0 <HAL_I2C_Init+0x13c>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1e59      	subs	r1, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80013ba:	1c59      	adds	r1, r3, #1
 80013bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013c0:	400b      	ands	r3, r1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <HAL_I2C_Init+0x138>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1e59      	subs	r1, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013da:	e051      	b.n	8001480 <HAL_I2C_Init+0x1dc>
 80013dc:	2304      	movs	r3, #4
 80013de:	e04f      	b.n	8001480 <HAL_I2C_Init+0x1dc>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d111      	bne.n	800140c <HAL_I2C_Init+0x168>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1e58      	subs	r0, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	440b      	add	r3, r1
 80013f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf0c      	ite	eq
 8001404:	2301      	moveq	r3, #1
 8001406:	2300      	movne	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	e012      	b.n	8001432 <HAL_I2C_Init+0x18e>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1e58      	subs	r0, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6859      	ldr	r1, [r3, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	0099      	lsls	r1, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001422:	3301      	adds	r3, #1
 8001424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Init+0x196>
 8001436:	2301      	movs	r3, #1
 8001438:	e022      	b.n	8001480 <HAL_I2C_Init+0x1dc>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10e      	bne.n	8001460 <HAL_I2C_Init+0x1bc>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1e58      	subs	r0, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6859      	ldr	r1, [r3, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	440b      	add	r3, r1
 8001450:	fbb0 f3f3 	udiv	r3, r0, r3
 8001454:	3301      	adds	r3, #1
 8001456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800145a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145e:	e00f      	b.n	8001480 <HAL_I2C_Init+0x1dc>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e58      	subs	r0, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	0099      	lsls	r1, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	fbb0 f3f3 	udiv	r3, r0, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	6809      	ldr	r1, [r1, #0]
 8001484:	4313      	orrs	r3, r2
 8001486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69da      	ldr	r2, [r3, #28]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6911      	ldr	r1, [r2, #16]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68d2      	ldr	r2, [r2, #12]
 80014ba:	4311      	orrs	r1, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	430b      	orrs	r3, r1
 80014c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2220      	movs	r2, #32
 80014fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	000186a0 	.word	0x000186a0
 800151c:	001e847f 	.word	0x001e847f
 8001520:	003d08ff 	.word	0x003d08ff
 8001524:	431bde83 	.word	0x431bde83
 8001528:	10624dd3 	.word	0x10624dd3

0800152c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af02      	add	r7, sp, #8
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	461a      	mov	r2, r3
 8001538:	460b      	mov	r3, r1
 800153a:	817b      	strh	r3, [r7, #10]
 800153c:	4613      	mov	r3, r2
 800153e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff fb48 	bl	8000bd4 <HAL_GetTick>
 8001544:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b20      	cmp	r3, #32
 8001550:	f040 80e0 	bne.w	8001714 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2319      	movs	r3, #25
 800155a:	2201      	movs	r2, #1
 800155c:	4970      	ldr	r1, [pc, #448]	; (8001720 <HAL_I2C_Master_Transmit+0x1f4>)
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f964 	bl	800182c <I2C_WaitOnFlagUntilTimeout>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800156a:	2302      	movs	r3, #2
 800156c:	e0d3      	b.n	8001716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_I2C_Master_Transmit+0x50>
 8001578:	2302      	movs	r3, #2
 800157a:	e0cc      	b.n	8001716 <HAL_I2C_Master_Transmit+0x1ea>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d007      	beq.n	80015a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2221      	movs	r2, #33	; 0x21
 80015b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2210      	movs	r2, #16
 80015be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	893a      	ldrh	r2, [r7, #8]
 80015d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4a50      	ldr	r2, [pc, #320]	; (8001724 <HAL_I2C_Master_Transmit+0x1f8>)
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015e4:	8979      	ldrh	r1, [r7, #10]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	6a3a      	ldr	r2, [r7, #32]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f89c 	bl	8001728 <I2C_MasterRequestWrite>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e08d      	b.n	8001716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001610:	e066      	b.n	80016e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	6a39      	ldr	r1, [r7, #32]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 f9de 	bl	80019d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00d      	beq.n	800163e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2b04      	cmp	r3, #4
 8001628:	d107      	bne.n	800163a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001638:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e06b      	b.n	8001716 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	3b01      	subs	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b04      	cmp	r3, #4
 800167a:	d11b      	bne.n	80016b4 <HAL_I2C_Master_Transmit+0x188>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	2b00      	cmp	r3, #0
 8001682:	d017      	beq.n	80016b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169e:	b29b      	uxth	r3, r3
 80016a0:	3b01      	subs	r3, #1
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	6a39      	ldr	r1, [r7, #32]
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 f9ce 	bl	8001a5a <I2C_WaitOnBTFFlagUntilTimeout>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00d      	beq.n	80016e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d107      	bne.n	80016dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e01a      	b.n	8001716 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d194      	bne.n	8001612 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001714:	2302      	movs	r3, #2
  }
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	00100002 	.word	0x00100002
 8001724:	ffff0000 	.word	0xffff0000

08001728 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af02      	add	r7, sp, #8
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	460b      	mov	r3, r1
 8001736:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b08      	cmp	r3, #8
 8001742:	d006      	beq.n	8001752 <I2C_MasterRequestWrite+0x2a>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d003      	beq.n	8001752 <I2C_MasterRequestWrite+0x2a>
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001750:	d108      	bne.n	8001764 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e00b      	b.n	800177c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	2b12      	cmp	r3, #18
 800176a:	d107      	bne.n	800177c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800177a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f84f 	bl	800182c <I2C_WaitOnFlagUntilTimeout>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00d      	beq.n	80017b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a2:	d103      	bne.n	80017ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e035      	b.n	800181c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017b8:	d108      	bne.n	80017cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ba:	897b      	ldrh	r3, [r7, #10]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	e01b      	b.n	8001804 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017cc:	897b      	ldrh	r3, [r7, #10]
 80017ce:	11db      	asrs	r3, r3, #7
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 0306 	and.w	r3, r3, #6
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f063 030f 	orn	r3, r3, #15
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	490e      	ldr	r1, [pc, #56]	; (8001824 <I2C_MasterRequestWrite+0xfc>)
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f875 	bl	80018da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e010      	b.n	800181c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017fa:	897b      	ldrh	r3, [r7, #10]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <I2C_MasterRequestWrite+0x100>)
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f865 	bl	80018da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	00010008 	.word	0x00010008
 8001828:	00010002 	.word	0x00010002

0800182c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800183c:	e025      	b.n	800188a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001844:	d021      	beq.n	800188a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001846:	f7ff f9c5 	bl	8000bd4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d302      	bcc.n	800185c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d116      	bne.n	800188a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f043 0220 	orr.w	r2, r3, #32
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e023      	b.n	80018d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d10d      	bne.n	80018b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4013      	ands	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	e00c      	b.n	80018ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4013      	ands	r3, r2
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf0c      	ite	eq
 80018c2:	2301      	moveq	r3, #1
 80018c4:	2300      	movne	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d0b6      	beq.n	800183e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018e8:	e051      	b.n	800198e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f8:	d123      	bne.n	8001942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001908:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001912:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f043 0204 	orr.w	r2, r3, #4
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e046      	b.n	80019d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001948:	d021      	beq.n	800198e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff f943 	bl	8000bd4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d116      	bne.n	800198e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f043 0220 	orr.w	r2, r3, #32
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e020      	b.n	80019d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10c      	bne.n	80019b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4013      	ands	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf14      	ite	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	2300      	moveq	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	e00b      	b.n	80019ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4013      	ands	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d18d      	bne.n	80018ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019e4:	e02d      	b.n	8001a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f878 	bl	8001adc <I2C_IsAcknowledgeFailed>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e02d      	b.n	8001a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019fc:	d021      	beq.n	8001a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fe:	f7ff f8e9 	bl	8000bd4 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d302      	bcc.n	8001a14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d116      	bne.n	8001a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f043 0220 	orr.w	r2, r3, #32
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e007      	b.n	8001a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4c:	2b80      	cmp	r3, #128	; 0x80
 8001a4e:	d1ca      	bne.n	80019e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a66:	e02d      	b.n	8001ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f837 	bl	8001adc <I2C_IsAcknowledgeFailed>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e02d      	b.n	8001ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a7e:	d021      	beq.n	8001ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a80:	f7ff f8a8 	bl	8000bd4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d302      	bcc.n	8001a96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d116      	bne.n	8001ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e007      	b.n	8001ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d1ca      	bne.n	8001a68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af2:	d11b      	bne.n	8001b2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001afc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f043 0204 	orr.w	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	2000000c 	.word	0x2000000c

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0a9b      	lsrs	r3, r3, #10
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08002b78 	.word	0x08002b78

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b80:	f7ff ffdc 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	08002b78 	.word	0x08002b78

08001ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e03f      	b.n	8001c36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fe96 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2224      	movs	r2, #36	; 0x24
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fd19 	bl	8002620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d130      	bne.n	8001cba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_UART_Transmit_IT+0x26>
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e029      	b.n	8001cbc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_UART_Transmit_IT+0x38>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e022      	b.n	8001cbc <HAL_UART_Transmit_IT+0x7e>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2221      	movs	r2, #33	; 0x21
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cb4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
  }
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d11d      	bne.n	8001d1e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_UART_Receive_IT+0x26>
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e016      	b.n	8001d20 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_UART_Receive_IT+0x38>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00f      	b.n	8001d20 <HAL_UART_Receive_IT+0x58>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	461a      	mov	r2, r3
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 faab 	bl	8002270 <UART_Start_Receive_IT>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	e000      	b.n	8001d20 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001d1e:	2302      	movs	r3, #2
  }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0ba      	sub	sp, #232	; 0xe8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10f      	bne.n	8001d8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_UART_IRQHandler+0x66>
 8001d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fb8f 	bl	80024aa <UART_Receive_IT>
      return;
 8001d8c:	e256      	b.n	800223c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80de 	beq.w	8001f54 <HAL_UART_IRQHandler+0x22c>
 8001d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d106      	bne.n	8001db2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001da8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80d1 	beq.w	8001f54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_UART_IRQHandler+0xae>
 8001dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_UART_IRQHandler+0xd2>
 8001de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_UART_IRQHandler+0xf6>
 8001e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f043 0204 	orr.w	r2, r3, #4
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d011      	beq.n	8001e4e <HAL_UART_IRQHandler+0x126>
 8001e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f043 0208 	orr.w	r2, r3, #8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 81ed 	beq.w	8002232 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_UART_IRQHandler+0x14e>
 8001e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fb1a 	bl	80024aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e80:	2b40      	cmp	r3, #64	; 0x40
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <HAL_UART_IRQHandler+0x17a>
 8001e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d04f      	beq.n	8001f42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fa22 	bl	80022ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb2:	2b40      	cmp	r3, #64	; 0x40
 8001eb4:	d141      	bne.n	8001f3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3314      	adds	r3, #20
 8001ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ec4:	e853 3f00 	ldrex	r3, [r3]
 8001ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3314      	adds	r3, #20
 8001ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ef2:	e841 2300 	strex	r3, r2, [r1]
 8001ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1d9      	bne.n	8001eb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d013      	beq.n	8001f32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	4a7d      	ldr	r2, [pc, #500]	; (8002104 <HAL_UART_IRQHandler+0x3dc>)
 8001f10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f80d 	bl	8000f36 <HAL_DMA_Abort_IT>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d016      	beq.n	8001f50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f30:	e00e      	b.n	8001f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f986 	bl	8002244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f38:	e00a      	b.n	8001f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f982 	bl	8002244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f40:	e006      	b.n	8001f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f97e 	bl	8002244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001f4e:	e170      	b.n	8002232 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f50:	bf00      	nop
    return;
 8001f52:	e16e      	b.n	8002232 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	f040 814a 	bne.w	80021f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8143 	beq.w	80021f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 813c 	beq.w	80021f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	f040 80b4 	bne.w	8002108 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8140 	beq.w	8002236 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	f080 8139 	bcs.w	8002236 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd6:	f000 8088 	beq.w	80020ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fe8:	e853 3f00 	ldrex	r3, [r3]
 8001fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	330c      	adds	r3, #12
 8002002:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002006:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800200a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002012:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002016:	e841 2300 	strex	r3, r2, [r1]
 800201a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800201e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1d9      	bne.n	8001fda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3314      	adds	r3, #20
 800202c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800202e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002030:	e853 3f00 	ldrex	r3, [r3]
 8002034:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3314      	adds	r3, #20
 8002046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800204a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800204e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002050:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002052:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002056:	e841 2300 	strex	r3, r2, [r1]
 800205a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800205c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1e1      	bne.n	8002026 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3314      	adds	r3, #20
 8002068:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800206c:	e853 3f00 	ldrex	r3, [r3]
 8002070:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3314      	adds	r3, #20
 8002082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002086:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002088:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800208c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800208e:	e841 2300 	strex	r3, r2, [r1]
 8002092:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1e3      	bne.n	8002062 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	330c      	adds	r3, #12
 80020ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b2:	e853 3f00 	ldrex	r3, [r3]
 80020b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ba:	f023 0310 	bic.w	r3, r3, #16
 80020be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	330c      	adds	r3, #12
 80020c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80020ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020d4:	e841 2300 	strex	r3, r2, [r1]
 80020d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e3      	bne.n	80020a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe feb6 	bl	8000e56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4619      	mov	r1, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8ac 	bl	8002258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002100:	e099      	b.n	8002236 <HAL_UART_IRQHandler+0x50e>
 8002102:	bf00      	nop
 8002104:	080023b3 	.word	0x080023b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002110:	b29b      	uxth	r3, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 808b 	beq.w	800223a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8086 	beq.w	800223a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	330c      	adds	r3, #12
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002138:	e853 3f00 	ldrex	r3, [r3]
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002144:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	330c      	adds	r3, #12
 800214e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002152:	647a      	str	r2, [r7, #68]	; 0x44
 8002154:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800215a:	e841 2300 	strex	r3, r2, [r1]
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1e3      	bne.n	800212e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3314      	adds	r3, #20
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	e853 3f00 	ldrex	r3, [r3]
 8002174:	623b      	str	r3, [r7, #32]
   return(result);
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3314      	adds	r3, #20
 8002186:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800218a:	633a      	str	r2, [r7, #48]	; 0x30
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002192:	e841 2300 	strex	r3, r2, [r1]
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1e3      	bne.n	8002166 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	330c      	adds	r3, #12
 80021b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	e853 3f00 	ldrex	r3, [r3]
 80021ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0310 	bic.w	r3, r3, #16
 80021c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	330c      	adds	r3, #12
 80021cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021d0:	61fa      	str	r2, [r7, #28]
 80021d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d4:	69b9      	ldr	r1, [r7, #24]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	e841 2300 	strex	r3, r2, [r1]
 80021dc:	617b      	str	r3, [r7, #20]
   return(result);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e3      	bne.n	80021ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f834 	bl	8002258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021f0:	e023      	b.n	800223a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_UART_IRQHandler+0x4ea>
 80021fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8e5 	bl	80023da <UART_Transmit_IT>
    return;
 8002210:	e014      	b.n	800223c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00e      	beq.n	800223c <HAL_UART_IRQHandler+0x514>
 800221e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f925 	bl	800247a <UART_EndTransmit_IT>
    return;
 8002230:	e004      	b.n	800223c <HAL_UART_IRQHandler+0x514>
    return;
 8002232:	bf00      	nop
 8002234:	e002      	b.n	800223c <HAL_UART_IRQHandler+0x514>
      return;
 8002236:	bf00      	nop
 8002238:	e000      	b.n	800223c <HAL_UART_IRQHandler+0x514>
      return;
 800223a:	bf00      	nop
  }
}
 800223c:	37e8      	adds	r7, #232	; 0xe8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop

08002244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	88fa      	ldrh	r2, [r7, #6]
 800228e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2222      	movs	r2, #34	; 0x22
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0220 	orr.w	r2, r2, #32
 80022dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b095      	sub	sp, #84	; 0x54
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	330c      	adds	r3, #12
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	e853 3f00 	ldrex	r3, [r3]
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002314:	643a      	str	r2, [r7, #64]	; 0x40
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002318:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800231a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800231c:	e841 2300 	strex	r3, r2, [r1]
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e5      	bne.n	80022f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3314      	adds	r3, #20
 800232e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	e853 3f00 	ldrex	r3, [r3]
 8002336:	61fb      	str	r3, [r7, #28]
   return(result);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3314      	adds	r3, #20
 8002346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800234e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002350:	e841 2300 	strex	r3, r2, [r1]
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e5      	bne.n	8002328 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	2b01      	cmp	r3, #1
 8002362:	d119      	bne.n	8002398 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	330c      	adds	r3, #12
 800236a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	e853 3f00 	ldrex	r3, [r3]
 8002372:	60bb      	str	r3, [r7, #8]
   return(result);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f023 0310 	bic.w	r3, r3, #16
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	330c      	adds	r3, #12
 8002382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002384:	61ba      	str	r2, [r7, #24]
 8002386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002388:	6979      	ldr	r1, [r7, #20]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	e841 2300 	strex	r3, r2, [r1]
 8002390:	613b      	str	r3, [r7, #16]
   return(result);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e5      	bne.n	8002364 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023a6:	bf00      	nop
 80023a8:	3754      	adds	r7, #84	; 0x54
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff ff39 	bl	8002244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b21      	cmp	r3, #33	; 0x21
 80023ec:	d13e      	bne.n	800246c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f6:	d114      	bne.n	8002422 <UART_Transmit_IT+0x48>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d110      	bne.n	8002422 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002414:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	1c9a      	adds	r2, r3, #2
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	621a      	str	r2, [r3, #32]
 8002420:	e008      	b.n	8002434 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	1c59      	adds	r1, r3, #1
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6211      	str	r1, [r2, #32]
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29b      	uxth	r3, r3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4619      	mov	r1, r3
 8002442:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10f      	bne.n	8002468 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002456:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002466:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002490:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe f834 	bl	8000508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b08c      	sub	sp, #48	; 0x30
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b22      	cmp	r3, #34	; 0x22
 80024bc:	f040 80ab 	bne.w	8002616 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d117      	bne.n	80024fa <UART_Receive_IT+0x50>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d113      	bne.n	80024fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	1c9a      	adds	r2, r3, #2
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
 80024f8:	e026      	b.n	8002548 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250c:	d007      	beq.n	800251e <UART_Receive_IT+0x74>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10a      	bne.n	800252c <UART_Receive_IT+0x82>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e008      	b.n	800253e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002538:	b2da      	uxtb	r2, r3
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29b      	uxth	r3, r3
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4619      	mov	r1, r3
 8002556:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002558:	2b00      	cmp	r3, #0
 800255a:	d15a      	bne.n	8002612 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0220 	bic.w	r2, r2, #32
 800256a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800257a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	2b01      	cmp	r3, #1
 800259a:	d135      	bne.n	8002608 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	330c      	adds	r3, #12
 80025a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	e853 3f00 	ldrex	r3, [r3]
 80025b0:	613b      	str	r3, [r7, #16]
   return(result);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f023 0310 	bic.w	r3, r3, #16
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	330c      	adds	r3, #12
 80025c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c2:	623a      	str	r2, [r7, #32]
 80025c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c6:	69f9      	ldr	r1, [r7, #28]
 80025c8:	6a3a      	ldr	r2, [r7, #32]
 80025ca:	e841 2300 	strex	r3, r2, [r1]
 80025ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e5      	bne.n	80025a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d10a      	bne.n	80025fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff fe29 	bl	8002258 <HAL_UARTEx_RxEventCallback>
 8002606:	e002      	b.n	800260e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fd ff8f 	bl	800052c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e002      	b.n	8002618 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002616:	2302      	movs	r3, #2
  }
}
 8002618:	4618      	mov	r0, r3
 800261a:	3730      	adds	r7, #48	; 0x30
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b0c0      	sub	sp, #256	; 0x100
 8002626:	af00      	add	r7, sp, #0
 8002628:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	68d9      	ldr	r1, [r3, #12]
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	ea40 0301 	orr.w	r3, r0, r1
 8002648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	431a      	orrs	r2, r3
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	431a      	orrs	r2, r3
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002678:	f021 010c 	bic.w	r1, r1, #12
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002686:	430b      	orrs	r3, r1
 8002688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800268a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269a:	6999      	ldr	r1, [r3, #24]
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	ea40 0301 	orr.w	r3, r0, r1
 80026a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b8f      	ldr	r3, [pc, #572]	; (80028ec <UART_SetConfig+0x2cc>)
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d005      	beq.n	80026c0 <UART_SetConfig+0xa0>
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <UART_SetConfig+0x2d0>)
 80026bc:	429a      	cmp	r2, r3
 80026be:	d104      	bne.n	80026ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026c0:	f7ff fa5c 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 80026c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026c8:	e003      	b.n	80026d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ca:	f7ff fa43 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80026ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026dc:	f040 810c 	bne.w	80028f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026f2:	4622      	mov	r2, r4
 80026f4:	462b      	mov	r3, r5
 80026f6:	1891      	adds	r1, r2, r2
 80026f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80026fa:	415b      	adcs	r3, r3
 80026fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002702:	4621      	mov	r1, r4
 8002704:	eb12 0801 	adds.w	r8, r2, r1
 8002708:	4629      	mov	r1, r5
 800270a:	eb43 0901 	adc.w	r9, r3, r1
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800271a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002722:	4690      	mov	r8, r2
 8002724:	4699      	mov	r9, r3
 8002726:	4623      	mov	r3, r4
 8002728:	eb18 0303 	adds.w	r3, r8, r3
 800272c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002730:	462b      	mov	r3, r5
 8002732:	eb49 0303 	adc.w	r3, r9, r3
 8002736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002746:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800274a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800274e:	460b      	mov	r3, r1
 8002750:	18db      	adds	r3, r3, r3
 8002752:	653b      	str	r3, [r7, #80]	; 0x50
 8002754:	4613      	mov	r3, r2
 8002756:	eb42 0303 	adc.w	r3, r2, r3
 800275a:	657b      	str	r3, [r7, #84]	; 0x54
 800275c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002764:	f7fd fd4e 	bl	8000204 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <UART_SetConfig+0x2d4>)
 800276e:	fba3 2302 	umull	r2, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	011c      	lsls	r4, r3, #4
 8002776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800277a:	2200      	movs	r2, #0
 800277c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002780:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	1891      	adds	r1, r2, r2
 800278e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002790:	415b      	adcs	r3, r3
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002798:	4641      	mov	r1, r8
 800279a:	eb12 0a01 	adds.w	sl, r2, r1
 800279e:	4649      	mov	r1, r9
 80027a0:	eb43 0b01 	adc.w	fp, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027b8:	4692      	mov	sl, r2
 80027ba:	469b      	mov	fp, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	eb1a 0303 	adds.w	r3, sl, r3
 80027c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027c6:	464b      	mov	r3, r9
 80027c8:	eb4b 0303 	adc.w	r3, fp, r3
 80027cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027e4:	460b      	mov	r3, r1
 80027e6:	18db      	adds	r3, r3, r3
 80027e8:	643b      	str	r3, [r7, #64]	; 0x40
 80027ea:	4613      	mov	r3, r2
 80027ec:	eb42 0303 	adc.w	r3, r2, r3
 80027f0:	647b      	str	r3, [r7, #68]	; 0x44
 80027f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027fa:	f7fd fd03 	bl	8000204 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4611      	mov	r1, r2
 8002804:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <UART_SetConfig+0x2d4>)
 8002806:	fba3 2301 	umull	r2, r3, r3, r1
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2264      	movs	r2, #100	; 0x64
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	1acb      	subs	r3, r1, r3
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800281a:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <UART_SetConfig+0x2d4>)
 800281c:	fba3 2302 	umull	r2, r3, r3, r2
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002828:	441c      	add	r4, r3
 800282a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002834:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800283c:	4642      	mov	r2, r8
 800283e:	464b      	mov	r3, r9
 8002840:	1891      	adds	r1, r2, r2
 8002842:	63b9      	str	r1, [r7, #56]	; 0x38
 8002844:	415b      	adcs	r3, r3
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800284c:	4641      	mov	r1, r8
 800284e:	1851      	adds	r1, r2, r1
 8002850:	6339      	str	r1, [r7, #48]	; 0x30
 8002852:	4649      	mov	r1, r9
 8002854:	414b      	adcs	r3, r1
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002864:	4659      	mov	r1, fp
 8002866:	00cb      	lsls	r3, r1, #3
 8002868:	4651      	mov	r1, sl
 800286a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800286e:	4651      	mov	r1, sl
 8002870:	00ca      	lsls	r2, r1, #3
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	4603      	mov	r3, r0
 8002878:	4642      	mov	r2, r8
 800287a:	189b      	adds	r3, r3, r2
 800287c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002880:	464b      	mov	r3, r9
 8002882:	460a      	mov	r2, r1
 8002884:	eb42 0303 	adc.w	r3, r2, r3
 8002888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002898:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800289c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028a0:	460b      	mov	r3, r1
 80028a2:	18db      	adds	r3, r3, r3
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a6:	4613      	mov	r3, r2
 80028a8:	eb42 0303 	adc.w	r3, r2, r3
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028b6:	f7fd fca5 	bl	8000204 <__aeabi_uldivmod>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <UART_SetConfig+0x2d4>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <UART_SetConfig+0x2d4>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	f003 0207 	and.w	r2, r3, #7
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4422      	add	r2, r4
 80028e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028e8:	e105      	b.n	8002af6 <UART_SetConfig+0x4d6>
 80028ea:	bf00      	nop
 80028ec:	40011000 	.word	0x40011000
 80028f0:	40011400 	.word	0x40011400
 80028f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800290a:	4642      	mov	r2, r8
 800290c:	464b      	mov	r3, r9
 800290e:	1891      	adds	r1, r2, r2
 8002910:	6239      	str	r1, [r7, #32]
 8002912:	415b      	adcs	r3, r3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800291a:	4641      	mov	r1, r8
 800291c:	1854      	adds	r4, r2, r1
 800291e:	4649      	mov	r1, r9
 8002920:	eb43 0501 	adc.w	r5, r3, r1
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	00eb      	lsls	r3, r5, #3
 800292e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002932:	00e2      	lsls	r2, r4, #3
 8002934:	4614      	mov	r4, r2
 8002936:	461d      	mov	r5, r3
 8002938:	4643      	mov	r3, r8
 800293a:	18e3      	adds	r3, r4, r3
 800293c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002940:	464b      	mov	r3, r9
 8002942:	eb45 0303 	adc.w	r3, r5, r3
 8002946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002966:	4629      	mov	r1, r5
 8002968:	008b      	lsls	r3, r1, #2
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002970:	4621      	mov	r1, r4
 8002972:	008a      	lsls	r2, r1, #2
 8002974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002978:	f7fd fc44 	bl	8000204 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002982:	fba3 2302 	umull	r2, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	011c      	lsls	r4, r3, #4
 800298a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298e:	2200      	movs	r2, #0
 8002990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002994:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800299c:	4642      	mov	r2, r8
 800299e:	464b      	mov	r3, r9
 80029a0:	1891      	adds	r1, r2, r2
 80029a2:	61b9      	str	r1, [r7, #24]
 80029a4:	415b      	adcs	r3, r3
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ac:	4641      	mov	r1, r8
 80029ae:	1851      	adds	r1, r2, r1
 80029b0:	6139      	str	r1, [r7, #16]
 80029b2:	4649      	mov	r1, r9
 80029b4:	414b      	adcs	r3, r1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029c4:	4659      	mov	r1, fp
 80029c6:	00cb      	lsls	r3, r1, #3
 80029c8:	4651      	mov	r1, sl
 80029ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ce:	4651      	mov	r1, sl
 80029d0:	00ca      	lsls	r2, r1, #3
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	4642      	mov	r2, r8
 80029da:	189b      	adds	r3, r3, r2
 80029dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029e0:	464b      	mov	r3, r9
 80029e2:	460a      	mov	r2, r1
 80029e4:	eb42 0303 	adc.w	r3, r2, r3
 80029e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80029f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a04:	4649      	mov	r1, r9
 8002a06:	008b      	lsls	r3, r1, #2
 8002a08:	4641      	mov	r1, r8
 8002a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a0e:	4641      	mov	r1, r8
 8002a10:	008a      	lsls	r2, r1, #2
 8002a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a16:	f7fd fbf5 	bl	8000204 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002a20:	fba3 1302 	umull	r1, r3, r3, r2
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	2164      	movs	r1, #100	; 0x64
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	3332      	adds	r3, #50	; 0x32
 8002a32:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3e:	441c      	add	r4, r3
 8002a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a44:	2200      	movs	r2, #0
 8002a46:	673b      	str	r3, [r7, #112]	; 0x70
 8002a48:	677a      	str	r2, [r7, #116]	; 0x74
 8002a4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a4e:	4642      	mov	r2, r8
 8002a50:	464b      	mov	r3, r9
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	415b      	adcs	r3, r3
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a5e:	4641      	mov	r1, r8
 8002a60:	1851      	adds	r1, r2, r1
 8002a62:	6039      	str	r1, [r7, #0]
 8002a64:	4649      	mov	r1, r9
 8002a66:	414b      	adcs	r3, r1
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a76:	4659      	mov	r1, fp
 8002a78:	00cb      	lsls	r3, r1, #3
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a80:	4651      	mov	r1, sl
 8002a82:	00ca      	lsls	r2, r1, #3
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4642      	mov	r2, r8
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8002aa4:	667a      	str	r2, [r7, #100]	; 0x64
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	008b      	lsls	r3, r1, #2
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002abc:	4641      	mov	r1, r8
 8002abe:	008a      	lsls	r2, r1, #2
 8002ac0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ac4:	f7fd fb9e 	bl	8000204 <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002ace:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2164      	movs	r1, #100	; 0x64
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	3332      	adds	r3, #50	; 0x32
 8002ae0:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <UART_SetConfig+0x4e4>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	f003 020f 	and.w	r2, r3, #15
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4422      	add	r2, r4
 8002af4:	609a      	str	r2, [r3, #8]
}
 8002af6:	bf00      	nop
 8002af8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b02:	bf00      	nop
 8002b04:	51eb851f 	.word	0x51eb851f

08002b08 <__libc_init_array>:
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	4d0d      	ldr	r5, [pc, #52]	; (8002b40 <__libc_init_array+0x38>)
 8002b0c:	4c0d      	ldr	r4, [pc, #52]	; (8002b44 <__libc_init_array+0x3c>)
 8002b0e:	1b64      	subs	r4, r4, r5
 8002b10:	10a4      	asrs	r4, r4, #2
 8002b12:	2600      	movs	r6, #0
 8002b14:	42a6      	cmp	r6, r4
 8002b16:	d109      	bne.n	8002b2c <__libc_init_array+0x24>
 8002b18:	4d0b      	ldr	r5, [pc, #44]	; (8002b48 <__libc_init_array+0x40>)
 8002b1a:	4c0c      	ldr	r4, [pc, #48]	; (8002b4c <__libc_init_array+0x44>)
 8002b1c:	f000 f818 	bl	8002b50 <_init>
 8002b20:	1b64      	subs	r4, r4, r5
 8002b22:	10a4      	asrs	r4, r4, #2
 8002b24:	2600      	movs	r6, #0
 8002b26:	42a6      	cmp	r6, r4
 8002b28:	d105      	bne.n	8002b36 <__libc_init_array+0x2e>
 8002b2a:	bd70      	pop	{r4, r5, r6, pc}
 8002b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b30:	4798      	blx	r3
 8002b32:	3601      	adds	r6, #1
 8002b34:	e7ee      	b.n	8002b14 <__libc_init_array+0xc>
 8002b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b3a:	4798      	blx	r3
 8002b3c:	3601      	adds	r6, #1
 8002b3e:	e7f2      	b.n	8002b26 <__libc_init_array+0x1e>
 8002b40:	08002b88 	.word	0x08002b88
 8002b44:	08002b88 	.word	0x08002b88
 8002b48:	08002b88 	.word	0x08002b88
 8002b4c:	08002b8c 	.word	0x08002b8c

08002b50 <_init>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr

08002b5c <_fini>:
 8002b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5e:	bf00      	nop
 8002b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b62:	bc08      	pop	{r3}
 8002b64:	469e      	mov	lr, r3
 8002b66:	4770      	bx	lr
